package com.mongodb.csfle;
/*
 * Copyright 2008-present MongoDB, Inc.

 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */


import static com.mongodb.client.model.Filters.eq;

import java.util.HashMap;
import java.util.Map;

import org.bson.BsonString;
import org.bson.Document;
import org.bson.conversions.Bson;

import com.mongodb.ConnectionString;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.model.UpdateOptions;
import com.mongodb.csfle.util.CSFLEHelpers;

/*
 * - Reads master key from file "master-key.txt" in root directory of project
 * - Creates a JSON schema for a specified collection to enable automatic encryption
 * - Creates an encrypted client and upserts a single document
 * - Finds the upserted document with the encrypted client using an encrypted field
 * - Attempts to find the upserted document with the normal client using an encrypted field
 * - Finds the upserted document with the normal client using a non-encrypted field
 */
public class InsertDataWithEncryptedFields {

    public static void main(String[] args) throws Exception {
        String connectionString = "mongodb://localhost:27017";
        String keyDb = "encryption";
        String keyColl = "__keyVault";
        String keyVaultCollection = String.join(".", keyDb, keyColl);
        String recordsDb = "medicalRecords";
        String recordsColl = "patients";
        Bson ssnQuery = eq("ssn", CSFLEHelpers.SAMPLE_SSN_VALUE);
        String keyId = ""; // paste the key generated by DataEncryptionKeyCreator here

        Map<String, Map<String, Object>> kmsProviders = new HashMap<>();
        Map<String, Object> providerDetails = new HashMap<>();

        /* START: Local master key block */
        String kmsProvider = "local";
        // Read the local master key from the provided file
        byte[] masterKey = CSFLEHelpers.readMasterKey("./master-key.txt");

        providerDetails.put("key", masterKey);

        kmsProviders.put("local", providerDetails);
        /* END: Local master key block */

        /*
         * AWS KMS
         * Uncomment this block to use your AWS KMS provider key
        String kmsProvider = "aws";
        providerDetails.put("accessKeyId", "<IAM User Access Key ID>");
        providerDetails.put("secretAccessKey", "<IAM User Secret Access Key>");
        kmsProviders.put(kmsProvider, providerDetails);
        */

        /* Azure KMS
         * Uncomment this block to use your Azure KMS provider key
        String kmsProvider = "azure";
        Map<String, Object> providerDetails = new HashMap<>();
        providerDetails.put("tenantId", "<Azure account organization>");
        providerDetails.put("clientId", "<Azure client ID>");
        providerDetails.put("clientSecret", "<Azure client secret>");
        providerDetails.put("identityPlatformEndpoint", "<Azure custom endpoint host>"); // optional
        kmsProviders.put(kmsProvider, providerDetails);
        */

        /*
         * GCP KMS
         * Uncomment this block to use your GCP KMS provider key
         String kmsProvider = "gcp";
         Map<String, Object> providerDetails = new HashMap<>();
         providerDetails.put("email", "<GCP service account email>");
         providerDetails.put("privateKey", "<GCP service account private key>");
         providerDetails.put("endpoint", "<GCP authentication endpoint>"); //optional
         kmsProviders.put(kmsProvider,  providerDetails);
        */

        /*
         * KMIP KMS
         * Uncomment this block to use your KMIP KMS provider key
        String kmsProvider = "kmip";
        providerDetails.put("endpoint", "localhost:5698");
        kmsProviders.put(kmsProvider, providerDetails);
        */


        // Construct a JSON Schema
        Document schema = CSFLEHelpers.createJSONSchema(keyId);
        System.out.println("Schema: " + schema.toJson());

        // Construct an encrypted client
        try (MongoClient encryptedClient =
                CSFLEHelpers.createEncryptedClient(connectionString,
                        kmsProvider,
                        kmsProviders,
                        keyVaultCollection, schema, recordsDb, recordsColl)) {

            // Insert a document into the collection
            MongoCollection<Document> collection = encryptedClient.getDatabase(recordsDb).getCollection(recordsColl);

            collection.updateOne(ssnQuery, new Document("$set", CSFLEHelpers.SAMPLE_DOC), new UpdateOptions().upsert(true));
            System.out.println("Successfully upserted the sample document!");

            // Query SSN field with encrypted client
            Document result = collection.find(ssnQuery).first();
            if (result == null) {
                throw new Exception("No query results were returned, please verify the document was inserted");
            }
            System.out.println("Encrypted client query by the SSN (deterministically-encrypted) field:\n" + result.toJson());
        }

        // Query SSN field with normal client without encryption
        try (MongoClient normalMongoClient = MongoClients.create(new ConnectionString(connectionString))) {
            MongoCollection<Document> normalCollection = normalMongoClient.getDatabase(recordsDb).getCollection(recordsColl);

            Document normalClientResult = normalCollection.find(ssnQuery).first();
            assert(normalClientResult == null) : "Check your collection documents for unencrypted SSN fields:\n" + normalClientResult;

            // Query name (non-encrypted) field with normal client without encryption
            Bson nameQuery = eq("name", CSFLEHelpers.SAMPLE_NAME_VALUE);
            Document normalClientNameResult = normalCollection.find(nameQuery).first();
            assert(normalClientNameResult != null) : "Check your collection to ensure a document with the matching name field exists.";
            System.out.println("Query by name returned the following document:\n " + normalClientNameResult);
        }
    }
}
